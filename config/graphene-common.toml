
[Light]
	#光照优化
	enableFixedLight = true
	#竹子光照优化
	enablebambooFixedLight = true

[Reflex]
	#启用类似 NVIDIA Reflex 的动态低延迟调度
	enableReflex = false
	#Reflex 微调等待时间（纳秒）。
	#GPU 吃不满就加正数；队列堆积就加负数。
	#Range: -1000000 ~ 1000000
	reflexOffsetNs = 0
	#Hard framerate cap (0 = disable)
	#Range: 0 ~ 1000
	maxFps = 0
	#在日志中输出每帧等待时间，方便调试
	reflexDebug = false

["粒子优化 | particle Optimization"]
	#启用粒子系统优化
	#Enable particle system optimizations
	enableParticleOptimization = true
	#启用粒子LOD系统 (Level of Detail)
	#Enable particle LOD system (Level of Detail)
	enableParticleLOD = true
	#LOD距离阈值 (方块)
	#Distance threshold for LOD reduction (blocks)
	#Range: 4.0 ~ 64.0
	lodDistanceThreshold = 16.0
	#LOD减少因子 (0.0-1.0)
	#Reduction factor for LOD (0.0-1.0)
	#Range: 0.0 ~ 1.0
	lodReductionFactor = 0.3
	#启用固定时间步长
	#Enable fixed timestep for particle physics
	enableFixedTimestep = true
	#固定时间步长间隔 (秒)
	#Fixed timestep interval in seconds
	#Range: 0.001 ~ 0.1
	fixedTimestepInterval = 0.05
	#始终应用LOD的粒子类型 (即使不在低优先级列表)
	#particle types that always use LOD (even if not low priority)
	lodParticleWhitelist = ["minecraft:rain", "minecraft:smoke"]
	#从不应用LOD的粒子类型
	#particle types that never use LOD
	lodParticleBlacklist = ["minecraft:portal", "minecraft:enchant"]

["高版本mc优化移植"]
	fixPearlChunkLeak = true
	fixProjectileInterpolation = true

["渲染优化 | Rendering Optimization"]
	#Skip outline rendering when no glowing entities are in view
	skipOutlineWhenNoGlowing = true
	#减少渲染延迟，把「把最终画面从 MC 的离屏 FBO（MainTarget）拷贝到屏幕」这一步，由“画一个全屏三角形”改成了“一次 GPU 内部的 glBlitFramebuffer 指令”
	fpsoo = true

[chest_optimization]
	#Enable chest rendering optimization
	enableOptimization = true
	#Rendering mode
	#Allowed Values: SIMPLE, VANILLA, SEMI_COMPLEX
	renderMode = "SIMPLE"
	#Optimize ender chests
	optimizeEnderChests = true
	#Optimize trapped chests
	optimizeTrappedChests = false
	#Max render distance in chunks
	#Range: 1 ~ 128
	maxRenderDistance = 32

["高级剔除 | Advanced Culling"]
	#启用树叶渲染优化
	#Enable leaf rendering optimizations
	enabled = true
	#剔除深度 (1-5)，值越高性能越好但可能导致视觉异常
	#Culling depth (1-5), Higher values = better performance but may cause visual artifacts
	#Range: 1 ~ 5
	cullingDepth = 5
	#随机剔除率 (0.0-1.0)，防止可见的剔除模式
	#Random rejection rate (0.0-1.0), Prevents visible culling patterns
	#Range: 0.0 ~ 1.0
	rejectionRate = 0.65
	#使用高级剔除算法，更精确但稍慢
	#Use advanced culling algorithm, More precise but slightly slower
	advancedCulling = true

	["高级剔除 | Advanced Culling"."超激进剔除 | Ultra Culling"]
		#启用超激进剔除（对所有方块/实体生效）
		#Enable ultra-aggressive culling (affects all blocks/entities)
		ultraCulling = true
		#剔除深度 (1-4)，值越大剔除越激进但可能出现bug
		#Culling depth (1-4), Higher values = more aggressive culling but may cause bugs
		#Range: 1 ~ 4
		ultraDepth = 4
		#仅剔除背向玩家的面（防止正面消失），值范围0.0-1.0
		#Only cull backfaces (prevent front-face disappearance), value range 0.0-1.0
		#Range: 0.0 ~ 1.0
		ultraBackfaceOnly = 0.95

["路径追踪 | Path Tracing"]
	#启用异步路径追踪进行剔除
	#Enable async path tracing for culling
	asyncTracing = true
	#路径追踪线程数 (1-8)
	#Number of threads for path tracing (1-8)
	#Range: 1 ~ 8
	tracingThreads = 4
	#最大追踪距离（方块）
	#Max tracing distance in blocks
	#Range: 1.0 ~ 16.0
	traceDistance = 6.0
	#回退简单剔除距离（方块）
	#Fallback simple culling distance in blocks
	#Range: 4.0 ~ 32.0
	fallbackDistance = 16.0

["树叶优化 | Leaf Optimization"]
	#使用高级树叶剔除算法
	#Use advanced leaf culling algorithm
	advancedLeafCulling = true
	#简单剔除所需的最小树叶连接数 (1-6)
	#Minimum connected leaves for simple culling (1-6)
	#Range: 1 ~ 6
	minConnections = 2
	#启用红树林根优化
	#Enable mangrove roots optimization
	optimizeMangrove = true

["非活动状态优化 | Inactive Optimization"]
	#窗口非活动时降低FPS
	#Enable FPS reduction when window is inactive
	reduceFpsWhenInactive = false
	#非活动状态FPS限制 (5-60)
	#FPS limit when window is inactive (5-60)
	#Range: 5 ~ 60
	inactiveFpsLimit = 10
	#窗口非活动时降低渲染距离
	#Enable render distance reduction when window is inactive
	reduceRenderDistanceWhenInactive = false
	#非活动状态渲染距离 (2-12)
	#Render distance when window is inactive (2-12)
	#Range: 2 ~ 12
	inactiveRenderDistance = 2

#实体优化 | Entity Optimization
[entity_optimization]
	#优化实体碰撞检测
	#Optimize entity collision detection
	disableEntityCollisions = true

	[entity_optimization."实体Tick优化 | Entity Tick Optimization"]
		#启用实体tick优化
		#Enable entity tick optimization
		optimizeEntities = true
		#优化村民在1x1空间内的AI
		villagerMoveOptimize = true
		#水平检测范围(方块)
		#Horizontal detection range (blocks)
		#Range: 1 ~ 256
		horizontalRange = 64
		#垂直检测范围(方块)
		#Vertical detection range (blocks)
		#Range: 1 ~ 256
		verticalRange = 32
		#忽略已死亡的实体
		#Ignore dead entities
		ignoreDeadEntities = false

	[entity_optimization."实体白名单 | Entity Whitelist"]
		#启用死亡实体清理
		#Enable dead entity cleanup
		entityCleanup = true
		#实体白名单（始终不优化）
		#Entity whitelist (always optimized)
		entityWhitelist = ["minecraft:ender_dragon"]

	[entity_optimization."袭击事件 | Raid Events"]
		#在袭击中保持袭击者tick
		#Keep raider ticking during raids
		tickRaidersInRaid = true

#物品优化 | Item Optimization
[item_optimization]
	#启用物品优化系统
	#Enable item optimization system
	OpenIO = true

	[item_optimization."堆叠合并 | Stack Merging"]
		#合并物品的最大堆叠数量（-1表示无限制）
		#Maximum stack size for merged items (-1 = no limit)
		#Range: > -1
		maxStackSize = -1
		#物品合并检测半径（方块）
		#Item merge detection radius in blocks
		#Range: 0.1 ~ 10.0
		mergeDistance = 1.5
		#在合并后的物品上显示堆叠数量
		#Show stack count on merged items
		showStackCount = true
		#当物品堆叠达到最大时锁定，不再参与合并
		#Lock stacks that have reached the maximum size to prevent further merging
		lockMaxedStacks = true

	[item_optimization."自定义堆叠 | Custom Stack Size"]
		#启用自定义堆叠大小-这里改了出问题的改回去，记住这句话！特别是科技服腐竹！
		#Enable custom stack sizes
		enabled = false
		#最大物品堆叠大小 (1-9999)
		#Maximum item stack size (1-9999)
		#Range: 1 ~ 9999
		maxStackSize = 64

	[item_optimization."物品列表 | Item Lists"]
		#0: 禁用 1: 白名单模式 2: 黑名单模式
		#0: Disabled, 1: Whitelist, 2: Blacklist
		#Range: 0 ~ 2
		listMode = 0
		#白名单/黑名单中的物品注册名列表
		#Item registry names for whitelist/blacklist
		itemList = []

	[item_optimization."物品实体 | Item Entities"]
		#优化物品实体tick
		#Optimize item entity ticking
		optimizeItems = false
		#物品实体白名单
		#Item entity whitelist
		itemWhitelist = ["minecraft:diamond"]

#内存优化 | Memory Optimization
[memory_optimization]
	#内存清理间隔(秒)
	#Memory cleanup interval (seconds)
	#Range: 60 ~ 3600
	cleanInterval = 600
	#清理时触发垃圾回收
	#Trigger garbage collection during cleanup
	enableGC = false

#区块优化 | Chunk Optimization
[chunk_optimization]
	#区块加载速度优化
	#Chunk Optimize
	"加速区块加载" = true
	#区块优化-Beta
	#Chunk Optimize Beta
	"Chunk Optimize Beta" = false
	#快速区块-实体加载优化
	"快速区块-实体加载优化延迟加载" = true
	#主动卸载非活动区块
	#Aggressively unload inactive chunks
	aggressiveChunkUnloading = false
	#区块卸载延迟 (秒)
	#Chunk unload delay (seconds)
	#Range: 10 ~ 600
	chunkUnloadDelay = 60

#异步优化 | Async Optimization
[async_optimization]
	#启用异步粒子处理
	#Enable asynchronous particle processing
	asyncParticles = true
	#每tick最大异步操作数
	#Max async operations processed per tick
	#Range: 100 ~ 10000
	maxAsyncOpsPerTick = 1000
	#出错后禁用该事件类型的异步处理
	#Disable async for event type after errors
	disableAsyncOnError = true
	#异步事件超时时间(秒)
	#Timeout in seconds for async events
	#Range: 1 ~ 10
	asyncEventTimeout = 2
	#等待异步事件完成
	#Wait for async events to complete
	waitForAsyncEvents = false

	[async_optimization."线程配置 | Thread Configuration"]
		#异步系统最大CPU核心数
		#Max CPU Cores for async system
		#Range: 2 ~ 128
		maxCPUPro = 8
		#最大线程数
		#Max Threads for general async operations
		#Range: 2 ~ 256
		maxthreads = 8

#事件系统 | Event System
[event_system]
	#启用高性能异步事件功能
	#Enable high-performance async event system
	featureEnabled = true
	#不应异步处理的事件类列表（支持通配符）
	#Event classes that should NOT be processed asynchronously (supports wildcards)
	classBlacklist = ["net.minecraftforge.event.TickEvent", "net.minecraftforge.event.level.LevelTickEvent", "net.minecraftforge.event.entity.living.*"]
	#不应异步处理的模组ID列表
	#Mod IDs whose events should NOT be processed asynchronously
	modBlacklist = []
	#启用严格的类存在检查（推荐开启以确保稳定性）
	#Enable strict class existence checking (disable for stability)
	strictClassChecking = true

#调试选项 | Debug Options
[debug]
	#启用调试日志
	#Enable debug logging
	debug = false

